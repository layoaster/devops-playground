variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

  # GCP Container Registry domain
  GCP_CR_DOMAIN: eu.gcr.io
  # CI's docker-compose config file
  CI_DOCKER_COMPOSE_FILE: ./etc/ci/docker-compose-ci.yml

stages:
  - build
  - test
  - staging

############## Build #############
build:
  stage: build

  image: docker:stable
  services:
  - docker:dind

  before_script:
    # Env vars
    # Docker base image tag
    - export DOCKER_IMAGE_BASE_TAG="${GCP_CR_DOMAIN}/audiadis-infrastructure"
    - export WEBAPI_IMAGE_TAG="${DOCKER_IMAGE_BASE_TAG}/webapi:${CI_COMMIT_SHA:0:8}"

    # Environment/Docker information
    - docker info

    # Installing docker-compose
    - apk add --no-cache py-pip
    - pip install docker-compose==1.23.2 flake8==3.6.0 flake8-import-order==0.18

    # Docker login for the GCP Container regustry
    - echo "$GCP_SERVICE_ACCOUNT_KEY" > key.json
    - docker login -u _json_key --password-stdin "https://${GCP_CR_DOMAIN}" < key.json

  script:
    - docker-compose -f "${CI_DOCKER_COMPOSE_FILE}" build --no-cache
    - docker push "${WEBAPI_IMAGE_TAG}"

############## Code Quality #############
code_quality:
  stage: test

  image: docker:stable
  services:
  - docker:dind

  before_script:
    # Env vars
    # Docker base image tag
    - export DOCKER_IMAGE_BASE_TAG="${GCP_CR_DOMAIN}/audiadis-infrastructure"
    - export WEBAPI_IMAGE_TAG="${DOCKER_IMAGE_BASE_TAG}/webapi:${CI_COMMIT_SHA:0:8}"

    # Environment/Docker information
    - docker info

    # Installing docker-compose
    - apk add --no-cache py-pip
    - pip install docker-compose==1.23.2 flake8==3.6.0 flake8-import-order==0.18

    # Docker login for the GCP Container regustry
    - echo "$GCP_SERVICE_ACCOUNT_KEY" > key.json
    - docker login -u _json_key --password-stdin "https://${GCP_CR_DOMAIN}" < key.json

  script:
    - flake8

############## Test #############
test:
  stage: test

  image: docker:stable
  services:
  - docker:dind

  before_script:
    # Env vars
    # Docker base image tag
    - export DOCKER_IMAGE_BASE_TAG="${GCP_CR_DOMAIN}/audiadis-infrastructure"
    - export WEBAPI_IMAGE_TAG="${DOCKER_IMAGE_BASE_TAG}/webapi:${CI_COMMIT_SHA:0:8}"

    # Environment/Docker information
    - docker info

    # Installing docker-compose
    - apk add --no-cache py-pip
    - pip install docker-compose==1.23.2 flake8==3.6.0 flake8-import-order==0.18

    # Docker login for the GCP Container regustry
    - echo "$GCP_SERVICE_ACCOUNT_KEY" > key.json
    - docker login -u _json_key --password-stdin "https://${GCP_CR_DOMAIN}" < key.json

  script:
    - docker pull "${WEBAPI_IMAGE_TAG}"
    - docker-compose -f "${CI_DOCKER_COMPOSE_FILE}" run --rm webapi pytest
    - docker-compose down


############## Deployment Staging #############
staging:
  image: layo85/gcloud-helm:latest
  stage: staging

  variables:
    GCP_ZONE:  europe-west1-b

  script:
    - echo "$GCP_SERVICE_ACCOUNT_KEY" > key.json
    - gcloud auth activate-service-account gitlab-ci@audiadis-infrastructure.iam.gserviceaccount.com --key-file=key.json
    - gcloud config set compute/zone $$GCP_ZONE
    - gcloud container clusters get-credentials $CI_ENVIRONMENT_NAME
    # - helm version
  environment:
    name: staging
    url: https://$CI_ENVIRONMENT_NAME.audiadis.io

  when: manual
